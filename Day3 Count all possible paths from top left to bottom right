Count all possible paths from top left to bottom right


import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] input = new String[2]; 
            input = br.readLine().split(" "); 
            int m = Integer.parseInt(input[0]); 
            int n = Integer.parseInt(input[1]); 
            Solution ob = new Solution();
            System.out.println(ob.numberOfPaths(m,n));
        }
    }
}

// } Driver Code Ends


class Solution
{
    long numberOfPaths(int m, int n)
    {
          long[][] dp = new long[m][n];
        for(int i = 0 ; i < m ; i++)
            dp[i][0] = 1;
        for(int i = 0 ; i < n ; i++)
            dp[0][i] = 1;
        for(int i = 1 ; i < m ; i++){
            for(int j =1; j < n; j++){
                dp[i][j] = (dp[i-1][j]  + dp[i][j-1]) % 1000000007;
            }
        }
        return dp[m-1][n-1];

    }
}
